
/****************************************************************************************************************************
 * 
 *                                              function of data collection
 * 
 * **************************************************************************************************************************/
{{{ //preprocess dataset
  var createLandsatCollection=function createLandsatCollection(params) {
    var defaultParams = {
      region: Map.getBounds(true), 
      start: '1982-01-01', 
      end: formatDate(new Date()), 
      mapImage: function (image) { return image }
    }
    params = mergeObjects([defaultParams, params])
    
    var filter = ee.Filter.and(
        ee.Filter.bounds(params.region),
        ee.Filter.date(params.start, params.end),
        ee.Filter.lt('CLOUD_COVER',50)
    )
   
  var bands_list=['blue', 'green', 'red', 'nir', 'swir1', 'swir2', 'pixel_qa',"brightness"]
    var l5 = ee.ImageCollection('LANDSAT/LT05/C02/T1_L2')
                .filter(filter)
                .map(maskL457sr)
                .select(
                  ['SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B7', 'QA_PIXEL',"ST_B6"], 
                  bands_list
                )
                
      
    var l7 = ee.ImageCollection("LANDSAT/LE07/C02/T1_L2")
              .filter(filter)
              .map(maskL457sr)
                .select(
                  ['SR_B1', 'SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B7', 'QA_PIXEL',"ST_B6"], 
                  bands_list
                )
              
      
    var l8 = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')
              .filter(filter)
              .map(maskL8sr)
              .select(
                ['SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B6', 'SR_B7','QA_PIXEL','ST_B10'], 
                bands_list
              )
            
      
    // return l5.merge(l7).merge(l8).sort('system:time_start')
    return l8.sort('system:time_start')
    
    // Define a function to scale the data and mask unwanted pixels.   .select('SR_B.|NDVI');
    function maskL457sr(image) {
      // Bit 0 - Fill
      // Bit 1 - Dilated Cloud
      // Bit 2 - Unused
      // Bit 3 - Cloud
      // Bit 4 - Cloud Shadow
      var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('111111', 2)).eq(0);
      var saturationMask = image.select('QA_RADSAT').eq(0);
    
      // Apply the scaling factors to the appropriate bands.
      var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
      var thermalBand = image.select('ST_B6').multiply(0.00341802).add(149.0);
    
      // Replace the original bands with the scaled ones and apply the masks.
      return image.addBands(opticalBands, null, true)
          .addBands(thermalBand, null, true)
          .updateMask(qaMask)
          .updateMask(saturationMask);
    }
        
    
    //Landsat8 SR数据去云
    function maskL8sr(image) {
      // Develop masks for unwanted pixels (fill, cloud, cloud shadow).
      var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('111111', 2)).eq(0);
      var saturationMask = image.select('QA_RADSAT').eq(0);
    
      // Apply the scaling factors to the appropriate bands.
      var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
      var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);
    
      // Calculate NDVI.
      // var ndvi = opticalBands.normalizedDifference(['SR_B5', 'SR_B4'])
      //     .rename('NDVI');
    
      // Replace original bands with scaled bands, add NDVI band, and apply masks.
      return image.addBands(opticalBands, null, true)
          .addBands(thermalBands, null, true)
          // .addBands(ndvi)
          .updateMask(qaMask)
          .updateMask(saturationMask);
    }
    

    
    function excludeBand(bandName, image) {
      var bandNames = image.bandNames()
      var bandIndexes = ee.List.sequence(0, bandNames.size().subtract(1))
        .filter(
          ee.Filter.neq('item', bandNames.indexOf(bandName))
        )
      return image.select(bandIndexes)
    }
    
    function formatDate(date) {
      var d = new Date(date),
          month = '' + (d.getMonth() + 1),
          day = '' + d.getDate(),
          year = d.getFullYear()
    
      if (month.length < 2) 
          month = '0' + month
      if (day.length < 2) 
          day = '0' + day
    
      return [year, month, day].join('-')
    }
  
    function mergeObjects(objects) {
      return objects.reduce(function (acc, o) {
        for (var a in o) { acc[a] = o[a] }
        return acc
        }, {})
    }
  } 
}}}

/****************************************************************************************************************************
* 
*                                              function of computer index
* 
* **************************************************************************************************************************/
{{{
  //计算归一化指数 通用方程
  var Norm_ID=function Norm_ID(B1,B2,name) {
    var norm_id= function(img){
      var temp_id= img.normalizedDifference([B1,B2]);
      return img.addBands(temp_id.rename(name));
    }
    return norm_id;
  }
  
  //计算归比例指数 通用方程
  var Two_Divide=function Two_Divide(B1,B2,name) {
    var two_divide= function(img){
      var temp_td=img.expression(
        'b1/b2',
        {b1:img.select(B1),
        b2:img.select(B2)
        });
      return img.addBands(temp_td.rename(name));
    }
    return two_divide;
  }
  
  
}}}


// {{{ //preprocess dataset
//   var createLandsatCollection=function createLandsatCollection(params) {
//     var defaultParams = {
//       region: Map.getBounds(true), 
//       start: '1982-01-01', 
//       end: formatDate(new Date()), 
//       mapImage: function (image) { return image }
//     }
//     params = mergeObjects([defaultParams, params])
    
//     var filter = ee.Filter.and(
//         ee.Filter.bounds(params.region),
//         ee.Filter.date(params.start, params.end  ),
//         ee.Filter.lt('CLOUD_COVER', 20)
//     )
//     var l4 = ee.ImageCollection('LANDSAT/LT04/C01/T1_SR')
//       .merge(ee.ImageCollection('LANDSAT/LT04/C01/T2_SR'))
//       .filter(filter)
//       .select(
//         ['B1', 'B2', 'B3', 'B4', 'B5', 'B7', 'pixel_qa'], 
//         ['blue', 'green', 'red', 'nir', 'swir1', 'swir2', 'pixel_qa']
//       )
//       .map(cloudMaskL457)
      
//     var l5 = ee.ImageCollection('LANDSAT/LT05/C01/T1_SR')
//       .merge(ee.ImageCollection('LANDSAT/LT05/C01/T2_SR'))
//       .filter(filter)
//       .select(
//         ['B1', 'B2', 'B3', 'B4', 'B5', 'B7', 'pixel_qa'], 
//         ['blue', 'green', 'red', 'nir', 'swir1', 'swir2', 'pixel_qa']
//       )
//       .map(cloudMaskL457)
      
//     var l7 = ee.ImageCollection('LANDSAT/LE07/C01/T1_SR')
//       .merge(ee.ImageCollection('LANDSAT/LE07/C01/T2_SR'))
//       .filter(filter)
//       .select(
//         ['B1', 'B2', 'B3', 'B4', 'B5', 'B7', 'pixel_qa'], 
//         ['blue', 'green', 'red', 'nir', 'swir1', 'swir2', 'pixel_qa']
//       )
//       .map(cloudMaskL457)
      
//     var l8 = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR')
//       .merge(ee.ImageCollection('LANDSAT/LC08/C01/T2_SR'))
//       .filter(filter)
//       .select(
//         ['B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'pixel_qa'], 
//         ['blue', 'green', 'red', 'nir', 'swir1', 'swir2', 'pixel_qa']
//       )
//       .map(cloudMaskL8)
      
//     // return l4.merge(l5).merge(l7).merge(l8).sort('system:time_start')
//     return l4.merge(l5).merge(l8).sort('system:time_start')
//   //Landsat4 5 7 8 
//     function cloudMaskL457(image) {
//       var qa = image.select('pixel_qa');
//       // If the cloud bit (5) is set and the cloud confidence (7) is high
//       // or the cloud shadow bit is set (3), then it's a bad pixel.
//       var cloud = qa.bitwiseAnd(1 << 5)
//                       .and(qa.bitwiseAnd(1 << 7))
//                       .or(qa.bitwiseAnd(1 << 3));
//       // Remove edge pixels that don't occur in all bands
//       var mask2 = image.mask().reduce(ee.Reducer.min());
//       return image.updateMask(cloud.not()).updateMask(mask2);
//   };
    
    
    
//     //Landsat8 SR数据去云
//     function cloudMaskL8(image) {
//       var cloudShadowBitMask = (1 << 3);
//       var cloudsBitMask = (1 << 5);
//       var qa = image.select("pixel_qa");
//       var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0)
//                     .and(qa.bitwiseAnd(cloudsBitMask).eq(0));
//       return image.updateMask(mask);
//     }
        
    
//     function excludeBand(bandName, image) {
//       var bandNames = image.bandNames()
//       var bandIndexes = ee.List.sequence(0, bandNames.size().subtract(1))
//         .filter(
//           ee.Filter.neq('item', bandNames.indexOf(bandName))
//         )
//       return image.select(bandIndexes)
//     }
  
//     function formatDate(date) {
//       var d = new Date(date),
//           month = '' + (d.getMonth() + 1),
//           day = '' + d.getDate(),
//           year = d.getFullYear()
    
//       if (month.length < 2) 
//           month = '0' + month
//       if (day.length < 2) 
//           day = '0' + day
    
//       return [year, month, day].join('-')
//     }
  
//     function mergeObjects(objects) {
//       return objects.reduce(function (acc, o) {
//         for (var a in o) { acc[a] = o[a] }
//         return acc
//         }, {})
//     }
//   } 
// }}}


/****************************************************************************************************************************
 * 
 *                                             setDate & other function
 * 
 * **************************************************************************************************************************/
Date.isLeapYear = function (year) { 
    return (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0)); 
};

Date.getDaysInMonth = function (year, month) {
    return [31, (Date.isLeapYear(year) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
};

Date.prototype.isLeapYear = function () { 
    return Date.isLeapYear(this.getFullYear()); 
};

Date.prototype.getDaysInMonth = function () { 
    return Date.getDaysInMonth(this.getFullYear(), this.getMonth());
};

Date.prototype.addMonths = function (value) {
    var n = this.getDate();
    this.setDate(1);
    this.setMonth(this.getMonth() + value);
    this.setDate(Math.min(n, this.getDaysInMonth()));
    return this.toISOString().substr(0, 10);
};

Date.prototype.addDays = function (value) {
    var n = this.getDate();
    this.setDate(n+value);
    return this.toISOString().substr(0, 10);
};

//==========================================> step3 get water
function cal_index(img){
  var evi=img.expression(
                '2.5 * (nir - red) / (nir + 6 * red - 7.5 * blue + 1)',
                {
                  red: img.select('red'),    // 620-670nm, RED
                  nir: img.select('nir'),    // 841-876nm, NIR
                  blue: img.select('blue')    // 459-479nm, BLUE
              });
  var AWEI_nsh=img.expression(
                '4*(green-swir1)-(0.25*nir+2.75*swir2)',
                {
                  swir1: img.select('swir1'),
                  swir2: img.select('swir2'),  
                  nir: img.select('nir'),    
                  green: img.select('green')    
              });
  var AWEI_sh=img.expression(
                'blue+2.5*green-1.5*(nir+swir1)-0.25*swir2',
                {
                  swir1: img.select('swir1'),
                  swir2: img.select('swir2'),  
                  nir: img.select('nir'),
                  green: img.select('green'),    
                  blue: img.select('blue')    
              });
  
  
   var ndwi=img.expression(
                '(green-nir)/(green+nir)',
                {
                  // swir1: img.select('swir1'),
                  // swir2: img.select('swir2'),  
                  nir: img.select('nir'),    
                  green: img.select('green')    
              });
  
  var mndwi=img.expression(
                '(green-swir1)/(green+swir1)',
                {
                  swir1: img.select('swir1'),
                  // swir2: img.select('swir2'),  
                  // nir: item_img.select('nir'),    
                  green: img.select('green')    
              });
  
  var ndvi=img.expression(
                '(nir-red)/(nir+red)',
                {
                  // swir1: img.select('swir1'),
                  // swir2: img.select('swir2'),  
                  nir: img.select('nir'),    
                  red: img.select('red')    
              });
  
  return img.addBands(evi.rename("EVI")).addBands(AWEI_nsh.rename("AWEI_nsh")).addBands(AWEI_sh.rename("AWEI_sh"))
            .addBands(ndwi.rename("NDWI")).addBands(mndwi.rename("MDNWI")).addBands(ndvi.rename("NDVI"))
}


function get_water(img){
  var mask1=img.select("AWEI_nsh").gt(0.88)
               .or(img.select("AWEI_sh").gt(-0.27))
               
  var mask2=img.select("AWEI_nsh")
               .subtract(img.select("AWEI_sh"))
               .gt(-0.2)
               
  var mask3=img.select("MDNWI").gt(img.select("EVI"))
               .or(img.select("MDNWI").gt(img.select("NDVI")))
  
  var dataset = ee.Image('CGIAR/SRTM90_V4')
  var elevation = dataset.select('elevation')
  var mask4=elevation.gt(5)
  
  var mask_all=mask1.and(mask2).and(mask3)
  return mask_all
}

function get_water_2(img){
  var dataset = ee.Image('CGIAR/SRTM90_V4')
  var elevation = dataset.select('elevation')
  
  
  var mask1=elevation.gt(665)
               .and(img.select("NDVI").lt(-0.2))
               
  var mask2=elevation.lt(665)
               .and(img.select("MDNWI").gt(-0.25))
               
 
  
  var mask_all=mask1.or(mask2)
  return mask_all
}


function get_area(img_mask){
  var area = ee.Image.pixelArea().divide(1000000);
  var ndwi_mask=img_mask.eq(1).multiply(area)
  var area_res = ndwi_mask.reduceRegion({
    reducer: ee.Reducer.sum(),
    geometry: roi,
    scale: 120,
    maxPixels: 1e13,
    tileScale :16
  });
  var area_lt_water=area_res.values().get(0);
  return area_lt_water
}
